/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package trabalho_desktop.view;

import trabalho_desktop.controller.DBController;
import trabalho_desktop.controller.AppointmentController;
import trabalho_desktop.model.Patient;
import trabalho_desktop.model.Doctor;
import trabalho_desktop.model.Appointment;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import trabalho_desktop.exceptions.CreateException;
import trabalho_desktop.exceptions.EditException;
import trabalho_desktop.exceptions.InvalidDayException;
import trabalho_desktop.exceptions.InvalidHourException;
import trabalho_desktop.exceptions.InvalidMinutesException;
import trabalho_desktop.exceptions.InvalidMonthException;
import trabalho_desktop.exceptions.InvalidYearException;
import trabalho_desktop.exceptions.RgLengthException;

/**
 *
 * @author erick
 */
public class AppointmentView extends javax.swing.JFrame {
    DBController dbController;
    AppointmentController appointmentController;

    /**
     * Creates new form AppointmentView
     */
    public AppointmentView() {
        initComponents();
    }
    
    public AppointmentView(DBController dbController){
        this.dbController = dbController;
        this.appointmentController = new AppointmentController(dbController.getConnection());
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        patient = new javax.swing.JLabel();
        pNameLabel = new javax.swing.JLabel();
        pNameField = new javax.swing.JTextField();
        pRgField = new javax.swing.JTextField();
        pRgLabel = new javax.swing.JLabel();
        doctor = new javax.swing.JLabel();
        dNameLabel = new javax.swing.JLabel();
        dNameField = new javax.swing.JTextField();
        dRgLabel = new javax.swing.JLabel();
        dRgField = new javax.swing.JTextField();
        dayField = new javax.swing.JTextField();
        especLabel = new javax.swing.JLabel();
        Date = new javax.swing.JLabel();
        dayLabel = new javax.swing.JLabel();
        especField = new javax.swing.JTextField();
        monthLabel = new javax.swing.JLabel();
        monthField = new javax.swing.JTextField();
        yearLabel = new javax.swing.JLabel();
        yearField = new javax.swing.JTextField();
        hourLabel = new javax.swing.JLabel();
        hourField = new javax.swing.JTextField();
        minutesLabel = new javax.swing.JLabel();
        minutesField = new javax.swing.JTextField();
        closeBtn = new javax.swing.JButton();
        addAppointment = new javax.swing.JButton();
        clearBtn = new javax.swing.JButton();
        editAppointment = new javax.swing.JButton();
        deleteAppointment = new javax.swing.JButton();
        searchAppointment = new javax.swing.JButton();
        searchAllAppointment = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        patient.setText("Paciente (dados com * são obrigatórios!)");

        pNameLabel.setText("Nome:");

        pRgLabel.setText("RG*:");

        doctor.setText("Médico (dados com * são obrigatórios!)");

        dNameLabel.setText("Nome:");

        dRgLabel.setText("RG*:");

        especLabel.setText("Espec:");

        Date.setText("Data (dados com * são obrigatórios)");

        dayLabel.setText("Dia*:");

        monthLabel.setText("Mês*:");

        monthField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                monthFieldActionPerformed(evt);
            }
        });

        yearLabel.setText("Ano*:");

        hourLabel.setText("Hora*:");

        hourField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hourFieldActionPerformed(evt);
            }
        });

        minutesLabel.setText("Minutos*:");

        minutesField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                minutesFieldActionPerformed(evt);
            }
        });

        closeBtn.setText("Sair");
        closeBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeBtnActionPerformed(evt);
            }
        });

        addAppointment.setText("Criar consulta");
        addAppointment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addAppointmentActionPerformed(evt);
            }
        });

        clearBtn.setText("Limpar");
        clearBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearBtnActionPerformed(evt);
            }
        });

        editAppointment.setText("Editar consulta (RG do Médico e Paciente)");
        editAppointment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editAppointmentActionPerformed(evt);
            }
        });

        deleteAppointment.setText("Excluir consulta (RG do Médico e Paciente)");
        deleteAppointment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteAppointmentActionPerformed(evt);
            }
        });

        searchAppointment.setText("Buscar consulta (RG do Médico e Paciente)");
        searchAppointment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchAppointmentActionPerformed(evt);
            }
        });

        searchAllAppointment.setText("Ver todas as consultas");
        searchAllAppointment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchAllAppointmentActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(searchAllAppointment, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(clearBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(closeBtn))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(Date)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(dayLabel)
                                        .addGap(18, 18, 18)
                                        .addComponent(dayField, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(monthLabel)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(monthField, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(yearLabel))
                                    .addComponent(patient, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(pNameLabel)
                                            .addComponent(pRgLabel))
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(pRgField)
                                            .addComponent(pNameField)))
                                    .addComponent(doctor, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(dNameLabel)
                                            .addComponent(dRgLabel)
                                            .addComponent(especLabel))
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(dRgField)
                                            .addComponent(dNameField)
                                            .addComponent(especField))))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(yearField, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(hourLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(hourField, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(minutesLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(minutesField, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(addAppointment)
                                .addGap(18, 18, 18)
                                .addComponent(editAppointment))
                            .addComponent(deleteAppointment, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(searchAppointment, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(0, 13, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(patient)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(pNameLabel)
                    .addComponent(pNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(pRgLabel)
                    .addComponent(pRgField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(doctor)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dNameLabel)
                    .addComponent(dNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dRgLabel)
                    .addComponent(dRgField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(especLabel)
                    .addComponent(especField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(Date)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dayField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dayLabel)
                    .addComponent(monthField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(monthLabel)
                    .addComponent(yearField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(yearLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(hourField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(hourLabel)
                    .addComponent(minutesField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(minutesLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addAppointment)
                    .addComponent(editAppointment))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(deleteAppointment)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(searchAppointment)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 40, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(closeBtn)
                    .addComponent(clearBtn)
                    .addComponent(searchAllAppointment))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void monthFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_monthFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_monthFieldActionPerformed

    private void hourFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hourFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_hourFieldActionPerformed

    private void minutesFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_minutesFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_minutesFieldActionPerformed

    private void searchAllAppointmentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchAllAppointmentActionPerformed
        new AppointmentTableView(dbController).setVisible(true);        // TODO add your handling code here:
    }//GEN-LAST:event_searchAllAppointmentActionPerformed

    private void closeBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeBtnActionPerformed
    close();        // TODO add your handling code here:
    }//GEN-LAST:event_closeBtnActionPerformed

    private void clearBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearBtnActionPerformed
    clear();        // TODO add your handling code here:
    }//GEN-LAST:event_clearBtnActionPerformed

    private void addAppointmentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addAppointmentActionPerformed
        Appointment appointment = new Appointment();
        try{
            appointment.setId(0);
            appointment.setPatientRg(pRgField.getText());
            appointment.setDoctorRg(dRgField.getText());
            appointment.setRole(3);
            appointment.getAppointmentDate().setDia(Integer.parseInt(dayField.getText()));
            appointment.getAppointmentDate().setMes(Integer.parseInt(monthField.getText()));
            appointment.getAppointmentDate().setAno(Integer.parseInt(yearField.getText()));
            appointment.getAppointmentDate().setHora(Integer.parseInt(hourField.getText()));
            appointment.getAppointmentDate().setMinutos(Integer.parseInt(minutesField.getText()));
            dbController.setAppointmentList(appointmentController.createAppointment(appointment, dbController.getAppointmentList()));
            JOptionPane.showMessageDialog(null, "Consulta criada com sucesso!", "Sucesso!", JOptionPane.INFORMATION_MESSAGE);
            clear();
        } catch (RgLengthException rle) {
            JOptionPane.showMessageDialog(null, rle.getError(), "Erro!", JOptionPane.ERROR_MESSAGE);
        } catch (InvalidDayException ide) {
            JOptionPane.showMessageDialog(null, ide.getError(), "Erro!", JOptionPane.ERROR_MESSAGE);
        } catch (InvalidMonthException ime) {
            JOptionPane.showMessageDialog(null, ime.getError(), "Erro!", JOptionPane.ERROR_MESSAGE);
        } catch (InvalidYearException iye) {
            JOptionPane.showMessageDialog(null, iye.getError(), "Erro!", JOptionPane.ERROR_MESSAGE);
        } catch (InvalidHourException ihe) {
            JOptionPane.showMessageDialog(null, ihe.getError(), "Erro!", JOptionPane.ERROR_MESSAGE);
        } catch (InvalidMinutesException imine) {
            JOptionPane.showMessageDialog(null, imine.getError(), "Erro!", JOptionPane.ERROR_MESSAGE);
        } catch (CreateException cex) {
            JOptionPane.showMessageDialog(null, cex.getError(), "Erro!", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_addAppointmentActionPerformed

    private void editAppointmentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editAppointmentActionPerformed
        Appointment appointmentEdited = new Appointment();
        ArrayList<Appointment> appointmentList = dbController.getAppointmentList();
        try{
            appointmentEdited.setId(0);
            appointmentEdited.setPatientRg(pRgField.getText());
            appointmentEdited.setDoctorRg(dRgField.getText());
            appointmentEdited.setRole(1);
            appointmentEdited.getAppointmentDate().setDia(Integer.parseInt(dayField.getText()));
            appointmentEdited.getAppointmentDate().setMes(Integer.parseInt(monthField.getText()));
            appointmentEdited.getAppointmentDate().setAno(Integer.parseInt(yearField.getText()));
            appointmentEdited.getAppointmentDate().setHora(Integer.parseInt(hourField.getText()));
            appointmentEdited.getAppointmentDate().setMinutos(Integer.parseInt(minutesField.getText()));
            dbController.setAppointmentList(appointmentController.editAppointment(appointmentEdited, appointmentList));
            JOptionPane.showMessageDialog(null, "Consulta editada com sucesso!", "Sucesso!", JOptionPane.INFORMATION_MESSAGE);
        }catch(RgLengthException rle){
            JOptionPane.showMessageDialog(null, rle.getError(), "Erro!", JOptionPane.ERROR_MESSAGE);
        } catch (InvalidYearException ex) {
            JOptionPane.showMessageDialog(null, ex.getError(), "Erro!", JOptionPane.ERROR_MESSAGE);
        } catch (InvalidMinutesException ex) {
            JOptionPane.showMessageDialog(null, ex.getError(), "Erro!", JOptionPane.ERROR_MESSAGE);
        } catch (InvalidHourException ex) {
            JOptionPane.showMessageDialog(null, ex.getError(), "Erro!", JOptionPane.ERROR_MESSAGE);
        } catch (InvalidMonthException ex) {
            JOptionPane.showMessageDialog(null, ex.getError(), "Erro!", JOptionPane.ERROR_MESSAGE);
        } catch (InvalidDayException ex) {
            JOptionPane.showMessageDialog(null, ex.getError(), "Erro!", JOptionPane.ERROR_MESSAGE);
        } catch (EditException ex) {
            JOptionPane.showMessageDialog(null, ex.getError(), "Erro!", JOptionPane.ERROR_MESSAGE);
        }     // TODO add your handling code here:
    }//GEN-LAST:event_editAppointmentActionPerformed

    private void searchAppointmentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchAppointmentActionPerformed
        try{
            Appointment appointment = new Appointment();
            appointment.setPatientRg(pRgField.getText());  
            appointment.setDoctorRg(dRgField.getText());
            appointment = appointmentController.readAppointment(appointment);
            
            Patient patient = null;
            int i = 0;
            while(i < dbController.getPatientList().size()){
                if(dbController.getPatientList().get(i).buscaRg(pRgField.getText())){
                    patient = dbController.getPatientList().get(i);
                }
                i++;
            }
            
            Doctor doctor = null;
            i = 0;
            while(i < dbController.getDoctorList().size()){
                if(dbController.getDoctorList().get(i).buscaRg(dRgField.getText())){
                    doctor = dbController.getDoctorList().get(i);
                }
                i++;
            }
            
            if(patient == null){
                JOptionPane.showMessageDialog(null, "Não encontramos este paciente!", "Erro!", JOptionPane.ERROR_MESSAGE);
                return;
            }
            
            if(doctor == null){
                JOptionPane.showMessageDialog(null, "Não encontramos este médico!", "Erro!", JOptionPane.ERROR_MESSAGE);
                return;
            }
            
            pNameField.setText(patient.getName());
            dNameField.setText(doctor.getName());
            especField.setText(doctor.getEspec());
            dayField.setText(Integer.toString(appointment.getAppointmentDate().getDia()));
            monthField.setText(Integer.toString(appointment.getAppointmentDate().getMes()));
            yearField.setText(Integer.toString(appointment.getAppointmentDate().getAno()));
            hourField.setText(Integer.toString(appointment.getAppointmentDate().getHora()));
            minutesField.setText(Integer.toString(appointment.getAppointmentDate().getMinutos()));
        } catch (RgLengthException rle) {
            JOptionPane.showMessageDialog(null, rle.getError(), "Erro!", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_searchAppointmentActionPerformed

    private void deleteAppointmentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteAppointmentActionPerformed
        try{
            Appointment appointment = new Appointment();
            ArrayList<Appointment> appointmentList = dbController.getAppointmentList();
            appointment = appointmentController.readAppointment(pRgField.getText(), dRgField.getText());
            
            if(appointment == null){
                JOptionPane.showMessageDialog(null, "Não foi possível encontrar esta consulta!", "Erro!", JOptionPane.ERROR_MESSAGE);
                return;
            }
            
            appointmentList = appointmentController.deleteAppointment(appointment, appointmentList);
            dbController.setAppointmentList(appointmentList);
            clear();
            pRgField.requestFocus();
            JOptionPane.showMessageDialog(null, "Consulta cancelada com sucesso!", "Sucesso!", JOptionPane.INFORMATION_MESSAGE);
        } catch(Exception error){
            System.out.println(error);
        }// TODO add your handling code here:
    }//GEN-LAST:event_deleteAppointmentActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AppointmentView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AppointmentView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AppointmentView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AppointmentView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AppointmentView().setVisible(true);
            }
        });
    }
    
        public void close(){
        int resp = JOptionPane.showConfirmDialog(
                    null,
                    "Deseja sair?",
                    "Saida",
                    JOptionPane.YES_NO_OPTION
                  );
        if(resp == 0){
            dispose();
        }
    }
    
     public void clear(){
        pNameField.setText("");
        pRgField.setText("");
        dNameField.setText("");
        dRgField.setText("");
        especField.setText("");
        dayField.setText("");
        monthField.setText("");
        yearField.setText("");
        hourField.setText("");
        minutesField.setText("");
        pNameField.requestFocus();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Date;
    private javax.swing.JButton addAppointment;
    private javax.swing.JButton clearBtn;
    private javax.swing.JButton closeBtn;
    private javax.swing.JTextField dNameField;
    private javax.swing.JLabel dNameLabel;
    private javax.swing.JTextField dRgField;
    private javax.swing.JLabel dRgLabel;
    private javax.swing.JTextField dayField;
    private javax.swing.JLabel dayLabel;
    private javax.swing.JButton deleteAppointment;
    private javax.swing.JLabel doctor;
    private javax.swing.JButton editAppointment;
    private javax.swing.JTextField especField;
    private javax.swing.JLabel especLabel;
    private javax.swing.JTextField hourField;
    private javax.swing.JLabel hourLabel;
    private javax.swing.JTextField minutesField;
    private javax.swing.JLabel minutesLabel;
    private javax.swing.JTextField monthField;
    private javax.swing.JLabel monthLabel;
    private javax.swing.JTextField pNameField;
    private javax.swing.JLabel pNameLabel;
    private javax.swing.JTextField pRgField;
    private javax.swing.JLabel pRgLabel;
    private javax.swing.JLabel patient;
    private javax.swing.JButton searchAllAppointment;
    private javax.swing.JButton searchAppointment;
    private javax.swing.JTextField yearField;
    private javax.swing.JLabel yearLabel;
    // End of variables declaration//GEN-END:variables
}
