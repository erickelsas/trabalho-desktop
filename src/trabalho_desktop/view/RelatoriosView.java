/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package trabalho_desktop.view;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.sql.*; 
import java.util.HashMap;
import java.util.Map;
import javax.swing.JOptionPane;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperExportManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.view.JasperViewer;
import trabalho_desktop.controller.DBController;

/**
 *
 * @author erick
 */
public class RelatoriosView extends javax.swing.JFrame {
    Connection connection = null;
    DBController dbController;
    /**
     * Creates new form RelatoriosView
     */
    public RelatoriosView() {
        initComponents();
    }
    
    public RelatoriosView(DBController dbController){
        this.dbController = dbController;
        this.connection = dbController.getConnection();
        initComponents();
    }
    
    public static final String pasta_relatorios = System.getProperty("user.dir") + "/src/relatorios/";
    public static final File fontPatients = new File(pasta_relatorios, "Patients.jrxml");
    public static final File compiledPatients = new File(pasta_relatorios, "Patients.jasper");
    public static final File pdfPatients = new File(pasta_relatorios, "Patients.pdf");
    
    public static final File fontAppointment = new File(pasta_relatorios, "Appointment.jrxml");
    public static final File compiledAppointment = new File(pasta_relatorios, "Appointment.jasper");
    public static final File pdfAppointment = new File(pasta_relatorios, "Appointment.pdf");
    
    public static final File fontDoctors = new File(pasta_relatorios, "Doctors.jrxml");
    public static final File compiledDoctors = new File(pasta_relatorios, "Doctors.jasper");
    public static final File pdfDoctors = new File(pasta_relatorios, "Doctors.pdf");
    
    public static final File fontCrm = new File(pasta_relatorios, "crm.jrxml");
    public static final File compiledCrm = new File(pasta_relatorios, "crm.jasper");
    public static final File pdfCrm = new File(pasta_relatorios, "crm.pdf");
    
    private Map constroiParametrosCliente() {
        Map params = new HashMap();

        String name = String.valueOf(JOptionPane.showInputDialog(
                this,
                "Digite o nome do médico",
                "Entrada de dados",
                JOptionPane.QUESTION_MESSAGE));

        System.out.println(name);
        params.put("dName", name);
        //params.put("idcliente", 2);
        return params;
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        verPacientes = new javax.swing.JButton();
        pdfPacientes = new javax.swing.JButton();
        verConsultasX = new javax.swing.JButton();
        pdfConsultasX = new javax.swing.JButton();
        verMédicos = new javax.swing.JButton();
        pdfMédicos = new javax.swing.JButton();
        verCrm = new javax.swing.JButton();
        crmPdf = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        verPacientes.setText("Ver pacientes");
        verPacientes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                verPacientesActionPerformed(evt);
            }
        });

        pdfPacientes.setText("Gerar PDF pacientes");
        pdfPacientes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pdfPacientesActionPerformed(evt);
            }
        });

        verConsultasX.setText("Ver consultas de determinado médico");
        verConsultasX.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                verConsultasXActionPerformed(evt);
            }
        });

        pdfConsultasX.setText("Gerar PDF dessas consultas");
        pdfConsultasX.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pdfConsultasXActionPerformed(evt);
            }
        });

        verMédicos.setText("Ver médicos");
        verMédicos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                verMédicosActionPerformed(evt);
            }
        });

        pdfMédicos.setText("Gerar PDF médicos");
        pdfMédicos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pdfMédicosActionPerformed(evt);
            }
        });

        verCrm.setText("Médico por região");
        verCrm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                verCrmActionPerformed(evt);
            }
        });

        crmPdf.setText("Gerar PDF médico por região");
        crmPdf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                crmPdfActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(80, 80, 80)
                .addComponent(verCrm)
                .addGap(29, 29, 29)
                .addComponent(crmPdf)
                .addContainerGap(72, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(verPacientes)
                        .addGap(29, 29, 29)
                        .addComponent(pdfPacientes))
                    .addComponent(verConsultasX)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(pdfConsultasX))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(verMédicos)
                        .addGap(29, 29, 29)
                        .addComponent(pdfMédicos)))
                .addGap(92, 92, 92))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(verPacientes)
                    .addComponent(pdfPacientes))
                .addGap(18, 18, 18)
                .addComponent(verConsultasX)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pdfConsultasX)
                .addGap(42, 42, 42)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(verMédicos)
                    .addComponent(pdfMédicos))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(verCrm)
                    .addComponent(crmPdf))
                .addContainerGap(38, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void verPacientesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_verPacientesActionPerformed
    
        JasperPrint impressao;
        try {
            FileInputStream arquivo = new FileInputStream(fontPatients);

            JasperReport relatorio
                    = JasperCompileManager.compileReport(arquivo);

            impressao = JasperFillManager.fillReport(
                    relatorio,
                    null,
                    connection);

            JasperViewer.viewReport(impressao);

        } catch (JRException | FileNotFoundException erro) {
            System.err.println("Não foi possível exportar o relatório.\n\n" + erro);
        }       // TODO add your handling code here:
    }//GEN-LAST:event_verPacientesActionPerformed

    private void pdfPacientesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pdfPacientesActionPerformed
        JasperPrint impressao;
        try {
            FileInputStream relatorio = new FileInputStream(compiledPatients);
            
            impressao = JasperFillManager.fillReport(
                    relatorio,
                    null,
                    connection);

            JasperExportManager.exportReportToPdfFile(impressao, pdfPatients.getAbsolutePath());

            JOptionPane.showMessageDialog(this, "Gerado o arquivo com sucesso: " + pdfPatients.getAbsolutePath());
        } catch (FileNotFoundException | JRException erro) {
            System.err.println("Não foi possível exportar o relatório.\n\n" + erro);
        }   // TODO add your handling code here:
    }//GEN-LAST:event_pdfPacientesActionPerformed

    private void verConsultasXActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_verConsultasXActionPerformed
        JasperPrint impressao;
        try {
            FileInputStream relatorio = new FileInputStream(compiledAppointment);
            
            impressao = JasperFillManager.fillReport(
                relatorio,//arquivo .jasper
                constroiParametrosCliente(),
                connection);

            JasperViewer.viewReport(impressao);
        } catch (FileNotFoundException | JRException ex) {
            System.err.println("Não foi possível exportar o relatório.\n\n");
            ex.printStackTrace();
        }        // TODO add your handling code here:
    }//GEN-LAST:event_verConsultasXActionPerformed

    private void pdfConsultasXActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pdfConsultasXActionPerformed
        JasperPrint impressao;
        try {
            FileInputStream relatorio = new FileInputStream(compiledAppointment);
            
            impressao = JasperFillManager.fillReport(
                relatorio,
                constroiParametrosCliente(),
                connection);

            JasperExportManager.exportReportToPdfFile(impressao, pdfAppointment.getAbsolutePath());
            
            JOptionPane.showMessageDialog(this, "Gerado o arquivo " + pdfAppointment.getAbsolutePath());
        } catch (FileNotFoundException | JRException ex) {
            System.err.println("Não foi possível exportar o relatório.\n\n");
            ex.printStackTrace();
        }    // TODO add your handling code here:
    }//GEN-LAST:event_pdfConsultasXActionPerformed

    private void verMédicosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_verMédicosActionPerformed
        JasperPrint impressao;
        try {
            FileInputStream arquivo = new FileInputStream(fontDoctors);

            JasperReport relatorio
                    = JasperCompileManager.compileReport(arquivo);

            impressao = JasperFillManager.fillReport(
                    relatorio,
                    null,
                    connection);

            JasperViewer.viewReport(impressao);

        } catch (JRException | FileNotFoundException erro) {
            System.err.println("Não foi possível exportar o relatório.\n\n" + erro);
        }    // TODO add your handling code here:
    }//GEN-LAST:event_verMédicosActionPerformed

    private void pdfMédicosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pdfMédicosActionPerformed
            JasperPrint impressao;
        try {
            FileInputStream relatorio = new FileInputStream(compiledDoctors);
            
            impressao = JasperFillManager.fillReport(
                    relatorio,
                    null,
                    connection);

            JasperExportManager.exportReportToPdfFile(impressao, pdfDoctors.getAbsolutePath());

            JOptionPane.showMessageDialog(this, "Gerado o arquivo com sucesso: " + pdfDoctors.getAbsolutePath());
        } catch (FileNotFoundException | JRException erro) {
            System.err.println("Não foi possível exportar o relatório.\n\n" + erro);
        }    // TODO add your handling code here:
    }//GEN-LAST:event_pdfMédicosActionPerformed

    private void verCrmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_verCrmActionPerformed
            JasperPrint impressao;
        try {
            FileInputStream arquivo = new FileInputStream(fontCrm);

            JasperReport relatorio
                    = JasperCompileManager.compileReport(arquivo);

            impressao = JasperFillManager.fillReport(
                    relatorio,
                    null,
                    connection);

            JasperViewer.viewReport(impressao);

        } catch (JRException | FileNotFoundException erro) {
            System.err.println("Não foi possível exportar o relatório.\n\n" + erro);
        }    // TODO add your handling code here:
    }//GEN-LAST:event_verCrmActionPerformed

    private void crmPdfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_crmPdfActionPerformed
                JasperPrint impressao;
        try {
            FileInputStream relatorio = new FileInputStream(compiledCrm);
            
            impressao = JasperFillManager.fillReport(
                    relatorio,
                    null,
                    connection);

            JasperExportManager.exportReportToPdfFile(impressao, pdfCrm.getAbsolutePath());

            JOptionPane.showMessageDialog(this, "Gerado o arquivo com sucesso: " + pdfCrm.getAbsolutePath());
        } catch (FileNotFoundException | JRException erro) {
            System.err.println("Não foi possível exportar o relatório.\n\n" + erro);
        }    // TODO add your handling code here:
    }//GEN-LAST:event_crmPdfActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(RelatoriosView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(RelatoriosView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(RelatoriosView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RelatoriosView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new RelatoriosView().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton crmPdf;
    private javax.swing.JButton pdfConsultasX;
    private javax.swing.JButton pdfMédicos;
    private javax.swing.JButton pdfPacientes;
    private javax.swing.JButton verConsultasX;
    private javax.swing.JButton verCrm;
    private javax.swing.JButton verMédicos;
    private javax.swing.JButton verPacientes;
    // End of variables declaration//GEN-END:variables
}
