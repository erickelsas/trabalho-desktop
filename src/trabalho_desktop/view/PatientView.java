/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package trabalho_desktop.view;

import trabalho_desktop.controller.PatientController;
import trabalho_desktop.controller.DBController;
import trabalho_desktop.model.Patient;
import java.io.IOException;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import trabalho_desktop.exceptions.BloodTypeInvalidException;
import trabalho_desktop.exceptions.CreateException;
import trabalho_desktop.exceptions.DeleteException;
import trabalho_desktop.exceptions.EditException;
import trabalho_desktop.exceptions.RgLengthException;

/**
 *
 * @author erick
 */
public class PatientView extends javax.swing.JFrame {
    DBController dbController;
    PatientController patientController;
    /**
     * Creates new form DoctorView
     */
    public PatientView() {
        initComponents();
    }

    public PatientView(DBController dbController){
        this.dbController = dbController;
        this.patientController = new PatientController(dbController.getConnection());
        initComponents();
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        name = new javax.swing.JLabel();
        nameField = new javax.swing.JTextField();
        crm = new javax.swing.JLabel();
        susField = new javax.swing.JTextField();
        sus = new javax.swing.JLabel();
        bloodTypeField = new javax.swing.JTextField();
        bloodType = new javax.swing.JLabel();
        rg = new javax.swing.JLabel();
        rgField = new javax.swing.JTextField();
        closeBtn = new javax.swing.JButton();
        clearBtn = new javax.swing.JButton();
        addPatient = new javax.swing.JButton();
        searchPatient = new javax.swing.JButton();
        searchAllPatients = new javax.swing.JButton();
        deletePatient = new javax.swing.JButton();
        editPatient = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        name.setText("Nome:");

        nameField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nameFieldActionPerformed(evt);
            }
        });

        crm.setText("Dados paciente");

        sus.setText("SUS:");

        bloodType.setText("Tipo Sangu√≠neo");

        rg.setText("RG:");

        rgField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rgFieldActionPerformed(evt);
            }
        });

        closeBtn.setText("Sair");
        closeBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeBtnActionPerformed(evt);
            }
        });

        clearBtn.setText("Limpar");
        clearBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearBtnActionPerformed(evt);
            }
        });

        addPatient.setText("Criar paciente");
        addPatient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addPatientActionPerformed(evt);
            }
        });

        searchPatient.setText("Consultar pelo RG");
        searchPatient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchPatientActionPerformed(evt);
            }
        });

        searchAllPatients.setText("Ver todos os pacientes");
        searchAllPatients.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchAllPatientsActionPerformed(evt);
            }
        });

        deletePatient.setText(" Remover paciente pelo RG");
        deletePatient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deletePatientActionPerformed(evt);
            }
        });

        editPatient.setText("Editar paciente");
        editPatient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editPatientActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(deletePatient, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(searchAllPatients, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(0, 83, Short.MAX_VALUE)
                                .addComponent(clearBtn)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(closeBtn))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(editPatient, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(sus)
                                .addGap(18, 18, 18)
                                .addComponent(susField, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(bloodType)
                                .addGap(18, 18, 18)
                                .addComponent(bloodTypeField, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(crm)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(name)
                                    .addComponent(rg))
                                .addGap(30, 30, 30)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(rgField, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(nameField, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(addPatient, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(searchPatient, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(89, 89, 89)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(name)
                    .addComponent(nameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rg)
                    .addComponent(rgField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(31, 31, 31)
                .addComponent(crm)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sus)
                    .addComponent(susField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bloodType)
                    .addComponent(bloodTypeField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addPatient)
                    .addComponent(searchPatient))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(deletePatient)
                    .addComponent(editPatient))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 47, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(closeBtn)
                    .addComponent(clearBtn)
                    .addComponent(searchAllPatients))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void nameFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nameFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nameFieldActionPerformed

    private void rgFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rgFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rgFieldActionPerformed

    private void closeBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeBtnActionPerformed
    close();        // TODO add your handling code here:
    }//GEN-LAST:event_closeBtnActionPerformed

    private void clearBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearBtnActionPerformed
    clear();        // TODO add your handling code here:
    }//GEN-LAST:event_clearBtnActionPerformed

    private void addPatientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addPatientActionPerformed
        Patient patient = new Patient();
        try{
            patient.setId(0);
            patient.setName(nameField.getText());
            patient.setRg(rgField.getText());
            patient.setRole(1);
            patient.setSus(Integer.parseInt(susField.getText()));
            patient.setBloodType(bloodTypeField.getText());
            ArrayList<Patient> patientList = dbController.getPatientList();
            patientList = patientController.createPatient(patient, patientList);
            dbController.setPatientList(patientList);
            JOptionPane.showMessageDialog(null, "Usu√°rio criado com sucesso!", "Sucesso!", JOptionPane.INFORMATION_MESSAGE);
            clear();
        }catch(RgLengthException rle){
            JOptionPane.showMessageDialog(null, rle.getError(), "Erro!", JOptionPane.ERROR_MESSAGE);
        }catch(BloodTypeInvalidException btie){
            JOptionPane.showMessageDialog(null, btie.getError(), "Erro!", JOptionPane.ERROR_MESSAGE);
        }catch(CreateException cex){
            JOptionPane.showMessageDialog(null, cex.getError(), "Erro!", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_addPatientActionPerformed

    private void searchPatientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchPatientActionPerformed
        searchByRg();

    }//GEN-LAST:event_searchPatientActionPerformed

    private void searchAllPatientsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchAllPatientsActionPerformed
        new PatientTableView(dbController).setVisible(true);          // TODO add your handling code here:
    }//GEN-LAST:event_searchAllPatientsActionPerformed

    private void deletePatientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deletePatientActionPerformed
        try{
            ArrayList<Patient> patientList = dbController.getPatientList();
            patientList = patientController.deletePatient(patientController.searchByRg(rgField.getText(), patientList), patientList);
            dbController.setPatientList(patientList);
            clear();
            rgField.requestFocus();
            JOptionPane.showMessageDialog(null, "Usu√°rio removido com sucesso!", "Sucesso!", JOptionPane.INFORMATION_MESSAGE);
        } catch(RgLengthException rle){
            JOptionPane.showMessageDialog(null, rle.getError(), "Erro!", JOptionPane.ERROR_MESSAGE);
        } catch(DeleteException dex){
            JOptionPane.showMessageDialog(null, dex.getError(), "Erro!", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_deletePatientActionPerformed

    private void editPatientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editPatientActionPerformed
        Patient patientEdited = new Patient();
        ArrayList<Patient> patientList = dbController.getPatientList();
        try{
            patientEdited.setId(0);
            patientEdited.setName(nameField.getText());
            patientEdited.setRg(rgField.getText());
            patientEdited.setRole(1);
            patientEdited.setSus(Integer.parseInt(susField.getText()));
            patientEdited.setBloodType(bloodTypeField.getText());
            dbController.setPatientList(patientController.editPatient(patientEdited, patientList));
            JOptionPane.showMessageDialog(null, "Usu√°rio editado com sucesso!", "Sucesso!", JOptionPane.INFORMATION_MESSAGE);
        }catch(RgLengthException rle){
            JOptionPane.showMessageDialog(null, rle.getError(), "Erro!", JOptionPane.ERROR_MESSAGE);
        }catch(BloodTypeInvalidException btie){
            JOptionPane.showMessageDialog(null, btie.getError(), "Erro!", JOptionPane.ERROR_MESSAGE);
        }catch(EditException eex){
            JOptionPane.showMessageDialog(null, eex.getError(), "Erro!", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_editPatientActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PatientView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PatientView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PatientView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PatientView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PatientView().setVisible(true);
            }
        });
    }
    
    public void searchByRg(){
        try{
           Patient patient = patientController.searchByRg(rgField.getText(), dbController.getPatientList());
           if(patient == null){
            JOptionPane.showMessageDialog(null, "Paciente n√£o encontrado!", "Erro!", JOptionPane.ERROR_MESSAGE);
            return;
           }
           nameField.setText(patient.getName());
           susField.setText(Integer.toString(patient.getSus()));
           bloodTypeField.setText(patient.getBloodType());
        }catch(RgLengthException rle){
            JOptionPane.showMessageDialog(null, rle.getError(), "Erro!", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    public void close(){
        int resp = JOptionPane.showConfirmDialog(
                    null,
                    "Deseja sair?",
                    "Saida",
                    JOptionPane.YES_NO_OPTION
                  );
        if(resp == 0){
            dispose();
        }
    }
    
     public void clear(){
        nameField.setText("");
        rgField.setText("");
        susField.setText("");
        bloodTypeField.setText("");
        nameField.requestFocus();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addPatient;
    private javax.swing.JLabel bloodType;
    private javax.swing.JTextField bloodTypeField;
    private javax.swing.JButton clearBtn;
    private javax.swing.JButton closeBtn;
    private javax.swing.JLabel crm;
    private javax.swing.JButton deletePatient;
    private javax.swing.JButton editPatient;
    private javax.swing.JLabel name;
    private javax.swing.JTextField nameField;
    private javax.swing.JLabel rg;
    private javax.swing.JTextField rgField;
    private javax.swing.JButton searchAllPatients;
    private javax.swing.JButton searchPatient;
    private javax.swing.JLabel sus;
    private javax.swing.JTextField susField;
    // End of variables declaration//GEN-END:variables
}
